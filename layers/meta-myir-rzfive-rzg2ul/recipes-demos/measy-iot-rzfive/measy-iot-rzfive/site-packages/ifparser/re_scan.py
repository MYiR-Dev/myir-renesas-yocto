import re

class _ScanMatch(object):
    def __init__(self, match, rule):
        self._match = match
        self._rule = rule

    def __getattr__(self, name):
        return getattr(self._match, name)

    def group(self, *groups):
        if len(groups) in (0, 1):
            return self._match.group(groups and groups[0] or 0)
        return tuple(self._match.group(group) for group in groups)

    def groupdict(self, default=None):
        prefix = self._rule + '\x00'
        rv = {}
        for key, value in self._match.groupdict(default).items():
            if key.startswith(prefix):
                rv[key[len(prefix):]] = value
        return rv

    def span(self, group=0):
        return self._match.span(group)

    def groups(self):
        return self._match.groups()

    def start(self, group=0):
        return self._match.start(group)

    def end(self, group=0):
        return self._match.end(group)

    def expand(self, template):
        raise RuntimeError('Unsupported on scan matches')


class ScanEnd(Exception):
    def __init__(self, pos):
        Exception.__init__(self, pos)
        self.pos = pos


class Scanner(object):
    def __init__(self, rules, flags=0):
        self.patterns = [(name, re.compile(regex, flags)) for name, regex in rules]

    def scan(self, string):
        pos = 0
        while pos < len(string):
            matched = False
            for name, pattern in self.patterns:
                match = pattern.match(string, pos)
                if match:
                    yield name, _ScanMatch(match, name)
                    pos = match.end()
                    matched = True
                    break
            if not matched:
                raise ScanEnd(pos)

    def scan_with_holes(self, string):
        pos = 0
        for name, match in self.scan(string):
            hole = string[pos:match.start()]
            if hole:
                yield None, hole
            yield name, match
            pos = match.end()
        hole = string[pos:]
        if hole:
            yield None, hole
